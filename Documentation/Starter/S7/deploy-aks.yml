name: "Gated, CI, and Deploy AKS - Terraform (Old)"

on:
  push:
    branches:
      - main
    # paths:
    #   - ".github/workflows/deploy-aks.yml"
  pull_request:
    branches:
      - main
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
  WORKING_DIRECTORY: "./Infrastructure/AKS"

jobs:
  scan-terraform-config:
    runs-on: ubuntu-latest
    name: Scan Terraform with Checov
    steps:
      - name: Checkout repo
        uses: actions/checkout@master

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12.1347.0
        with:
          directory: ${{ env.WORKING_DIRECTORY }}
          soft_fail: true # optional: do not return an error code if there are failed checks
          # check: CKV_AWS_1 # optional: run only a specific check_id. can be comma separated list
          # skip_check: CKV_AWS_2 # optional: skip a specific check_id. can be comma separated list
          # quiet: true # optional: display only failed checks
          # framework: terraform # optional: run only on a specific infrastructure {cloudformation,terraform,kubernetes,all}
          # output_format: sarif # optional: the output format, one of: cli, json, junitxml, github_failed_only, or sarif. Default: sarif
          # download_external_modules: true # optional: download external terraform modules from public git repositories and terraform registry
          # log_level: DEBUG # optional: set log level. Default WARNING
          # config_file: path/this_file
          # baseline: cloudformation/.checkov.baseline # optional: Path to a generated baseline file. Will only report results not in the baseline.
          # container_user: 1000 # optional: Define what UID and / or what GID to run the container under to prevent permission issues

  gated-terraform-build:
    name: "Gated Build when PR terraform"
    runs-on: ubuntu-latest
    needs: [scan-terraform-config]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Validates the Terraform Files
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIRECTORY }}

  ci-terraform-build:
    name: "CI Build when PR terraform"
    runs-on: ubuntu-latest
    needs: [gated-terraform-build]
    if: github.ref == 'refs/heads/main'

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Validates the Terraform Files
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -no-color -input=false
        working-directory: ${{ env.WORKING_DIRECTORY }}

  deploy-terraform-aks-azure:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: development
    needs: [ci-terraform-build]

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Validates the Terraform Files
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -no-color -input=false
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.WORKING_DIRECTORY }}

      # - name: "Terraform Format"
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.14.8
      #     tf_actions_subcommand: "fmt"
      #     tf_actions_working_dir: "./Infrastructure/AKS"

      # - name: "Terraform Init"
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.14.8
      #     tf_actions_subcommand: "init"
      #     tf_actions_working_dir: "./Infrastructure/AKS"

      # - name: "Terraform Validate"
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.14.8
      #     tf_actions_subcommand: "validate"
      #     tf_actions_working_dir: "./Infrastructure/AKS"

      # - name: "Terraform Plan"
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.14.8
      #     tf_actions_subcommand: "plan"
      #     tf_actions_working_dir: "./Infrastructure/AKS"

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main'
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.14.8
      #     tf_actions_subcommand: "apply"
      #     tf_actions_working_dir: "./Infrastructure/AKS"
